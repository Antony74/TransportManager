#pragma warning (disable: 4506) // v8 can probably be forgiven this nonsense: no definition for inline function 'v8::Persistent<T> v8::Persistent<T>::New(v8::Handle<T>)
#pragma warning (disable: 4530) // This is a node-gyp issue: C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc

// A bit of MFC stuff
#define WINVER 0x0600
#include <afxdisp.h>

// A bit of .NET stuff
#include <mscoree.h>
#pragma comment(lib, "MSCorEE.lib")
#import "mscorlib.tlb" raw_interfaces_only rename("ReportEvent", "InteropServices_ReportEvent")
#define DOT_NET_VERSION L"v4.0.30319"
#import <..\v4.0.30319\System.tlb> exclude("IDataObject")
#import <..\v4.0.30319\System.Windows.Forms.tlb> exclude("IDataObject")

// A bit of JavaScript stuff
#include <node.h>
#include <v8.h>
using namespace v8;

void uninit(void* p);
Handle<Value> start(const Arguments& args);

CString AsCString(Local<Value> value)
{
	CString s;
	Local<String> str = value->ToString();
	value->ToString()->WriteAscii(s.GetBuffer(str->Length()));
	s.ReleaseBuffer();
	return s;
}

ICorRuntimeHost* g_pRuntimeHost = NULL;
mscorlib::_AppDomain* g_pAppDomain = NULL;
mscorlib::_Assembly* g_pSystemWindowsForms = NULL;

void init(Handle<Object> exports)
{
	IUnknown* pAppDomainUnknown = NULL;

    HRESULT hr;

	hr = CorBindToRuntimeEx(DOT_NET_VERSION, NULL, 0, CLSID_CorRuntimeHost, IID_ICorRuntimeHost, (LPVOID*)&g_pRuntimeHost);

	g_pRuntimeHost->Start();
	g_pRuntimeHost->GetDefaultDomain(&pAppDomainUnknown);

	hr = pAppDomainUnknown->QueryInterface(__uuidof(mscorlib::_AppDomain), (void**)&g_pAppDomain);

	// nope, need the full name here
	hr = g_pAppDomain->Load_2(L"System.Windows.Forms", &g_pSystemWindowsForms);

	exports->Set(String::NewSymbol("start"), FunctionTemplate::New(start)->GetFunction());
	node::AtExit(uninit);
}

Handle<Value> start(const Arguments& args)
{
	_variant_t vtMenuStop = NULL;
	_variant_t vtRetVal = NULL;
	mscorlib::_TypePtr spType = NULL;
	g_pSystemWindowsForms->GetType_2(L"MenuItem", &spType);

	g_pSystemWindowsForms->CreateInstance(L"MenuItem", &vtMenuStop);

//    spType->InvokeMember_3(bstrMethodName, 0, NULL, vtObject, NULL, &vtRetVal);

	return Boolean::New(true);
}

void uninit(void* p)
{
}

NODE_MODULE(wintaskbarwrapper, init)

