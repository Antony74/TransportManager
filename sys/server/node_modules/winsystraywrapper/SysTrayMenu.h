#pragma once

#include "MenuObject.h"

class CSysTrayMenu
{
public:

	static void Create(const CString& sIconPath, const CString& sTitle, HANDLE hWrappedProcess, CMenuObject& menuObject);
	static DWORD WINAPI ThreadStart(LPVOID lpParam);
	static CSysTrayMenu* GetSoleInstance();
	static void Close();

	bool Poll(CMenuObject& menuObject);
	HANDLE GetWrappedProcessHandle() {return m_hWrappedProcess;}

	void StopWrappedProcess();

private:

	CSysTrayMenu();
	virtual ~CSysTrayMenu();

	bool Init();
	void Run();

	static BOOL CALLBACK EnumWindowsCallback(HWND hWnd, LPARAM lParam);
	static LRESULT CALLBACK WndProc(HWND hWnd, UINT nMsg, WPARAM wParam, LPARAM lParam);

	BOOL CALLBACK EnumWindowsCallbackImpl(HWND hWnd, LPARAM lParam);
	LRESULT CALLBACK WndProcImpl(HWND hWnd, UINT nMsg, WPARAM wParam, LPARAM lParam);

	// The parameters passed into the Create method
	CString m_sIconPath;
	CString m_sTitle;
	HANDLE m_hWrappedProcess;

	static CSysTrayMenu* m_pSoleInstance;

	HWND m_hWndWrappedMain;
	NOTIFYICONDATA m_icon;
	HMENU m_hMenu;

	std::vector<CString> m_vecMenuItemCaptions;

	DWORD m_dwWrappedProcessID;

	// What's the maximum number of menu items you might click in any given tenth of a second?  If as I suspect the answer is one, then this is thread safe!
	volatile int m_nMenuItemClicked;

	CString m_sErrorMessage;
};

