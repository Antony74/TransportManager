#include "systraymenu.h"

CString AsCString(Value* value)
{
	CString s;
	Local<String> str = value->ToString();
	value->ToString()->WriteAscii(s.GetBuffer(str->Length()));
	s.ReleaseBuffer();
	return s;
}

Handle<Value> run(const Arguments& args)
{
	HandleScope scope;

	if (args.Length() != 1 || args[0]->IsObject() == false)
	{
		ThrowException(Exception::Error(String::New("'run' function expected one argument, which should be an object")));
		return scope.Close(Undefined());
	}

	Local<Value> vIcon = args[0]->ToObject()->Get(String::NewSymbol("icon"));
	Local<Value> vTitle = args[0]->ToObject()->Get(String::NewSymbol("title"));

	CString sIconPath = vIcon->IsString() ? AsCString(*vIcon)  : _T("");
	CString sTitle = vTitle->IsString()   ? AsCString(*vTitle) : _T("");

	if (sIconPath == _T(""))
	{
		ThrowException(Exception::Error(String::New("'icon' property not specified")));
		return scope.Close(Undefined());
	}

	if (sTitle == _T(""))
	{
		sTitle = _T("Systray wrapper");
	}

	CSysTrayMenu sysTrayMenu;
	bool brc = sysTrayMenu.Init(sIconPath, sTitle);

	if (brc)
	{
		sysTrayMenu.Run();
	}

	return scope.Close(Undefined());
}

void init(Handle<Object> exports)
{
	exports->Set(String::NewSymbol("run"),  FunctionTemplate::New(run)->GetFunction());
}

NODE_MODULE(winsystraywrapper, init)

