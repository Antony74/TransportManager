#include "MenuObject.h"

CMenuObject::CMenuObject(Local<Object> oMenu)
{
	m_oMenu = oMenu;
}

CMenuObject::~CMenuObject()
{
}

int CMenuObject::GetLength()
{
	return m_oMenu->Get(String::NewSymbol("length"))->Int32Value();
}

CString CMenuObject::GetCaption(int nItem)
{
	Local<Value> vItem = m_oMenu->Get(Integer::New(nItem));

	if (vItem->IsObject())
	{
		Local<Value> vCaption = vItem->ToObject()->Get(String::NewSymbol("caption"));
		CString sCaption = vCaption->IsString() ? AsCString(*vCaption) : _T("");

		if (sCaption.GetLength())
		{
			return sCaption;
		}
		else
		{
			return _T("*No caption*");
		}
	}
	else
	{
		return _T("*Not an object*");
	}
}

bool CMenuObject::GetIsDefault(int nItem)
{
	Local<Value> vItem = m_oMenu->Get(Integer::New(nItem));

	if (vItem->IsObject())
	{
		Local<Value> vCaption = vItem->ToObject()->Get(String::NewSymbol("default"));

		return vCaption->BooleanValue();
	}

	return false;
}

bool CMenuObject::DoAction(int nItem)
{
	Local<Value> vItem = m_oMenu->Get(Integer::New(nItem));

	if (vItem->IsObject())
	{
		Local<Value> vFunction = vItem->ToObject()->Get(String::NewSymbol("function"));

		if (vFunction->IsFunction())
		{
			Persistent<Context> context = Context::New();
			Context::Scope context_scope(context);
			Handle<v8::Object> global = context->Global();

			Local<Function> function = Function::Cast(*vFunction);
			function->Call(global, 0, NULL);

			return true;
		}
		else
		{
			CString sMsg;
			sMsg.Format(_T("Didn't find a function within menu item %d's 'function' property"), nItem);
			ThrowException(Exception::Error(String::New(sMsg)));
			return false;
		}
	}
	else
	{
		CString sMsg;
		sMsg.Format(_T("Menu item %d is not an object"), nItem);
		ThrowException(Exception::Error(String::New(sMsg)));
		return false;
	}
}

CString AsCString(Value* value)
{
	CString s;
	Local<String> str = value->ToString();
	value->ToString()->WriteAscii(s.GetBuffer(str->Length()));
	s.ReleaseBuffer();
	return s;
}

