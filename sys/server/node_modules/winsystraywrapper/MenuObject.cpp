#include "MenuObject.h"

CMenuObject::CMenuObject(Local<Object> oMenu)
{
	m_oMenu = oMenu;
}

CMenuObject::~CMenuObject()
{
}

int CMenuObject::GetLength()
{
	return m_oMenu->Get(::AsV8String("length"))->Int32Value();
}

CString CMenuObject::GetCaption(int nItem)
{
	Local<Value> vItem = m_oMenu->Get(Integer::New(Isolate::GetCurrent(), nItem));

	if (vItem->IsObject())
	{
		Local<Value> vCaption = vItem->ToObject()->Get(::AsV8String("caption"));
		CString sCaption = vCaption->IsString() ? AsCString(vCaption) : _T("");

		if (sCaption.GetLength())
		{
			return sCaption;
		}
		else
		{
			return _T("*No caption*");
		}
	}
	else
	{
		return _T("*Not an object*");
	}
}

bool CMenuObject::GetIsDefault(int nItem)
{
	Local<Value> vItem = m_oMenu->Get(Integer::New(Isolate::GetCurrent(), nItem));

	if (vItem->IsObject())
	{
		Local<Value> vCaption = vItem->ToObject()->Get(::AsV8String("default"));

		return vCaption->BooleanValue();
	}

	return false;
}

bool CMenuObject::DoAction(int nItem)
{
	Local<Value> vItem = m_oMenu->Get(Integer::New(Isolate::GetCurrent(), nItem));

	if (vItem->IsObject())
	{
		Local<Value> vFunction = vItem->ToObject()->Get(::AsV8String("function"));

		if (vFunction->IsFunction())
		{
			Handle<v8::Object> global = Isolate::GetCurrent()->GetCurrentContext()->Global();

			Local<Function> function = Local<Function>::Cast(vFunction);
			function->Call(global, 0, NULL);

			return true;
		}
		else
		{
			CString sMsg;
			sMsg.Format(_T("Didn't find a function within menu item %d's 'function' property"), nItem);
			::ThrowException(sMsg);
			return false;
		}
	}
	else
	{
		CString sMsg;
		sMsg.Format(_T("Menu item %d is not an object"), nItem);
		::ThrowException(sMsg);
		return false;
	}
}

CString AsCString(Handle<Value> value)
{
	Handle<String> str = value->ToString();
	LPWSTR lpwsz = new WCHAR[str->Length() + 1];
	value->ToString()->Write((uint16_t*)lpwsz);
	CString s(lpwsz);
	delete lpwsz;
	return s;
}

Handle<String> AsV8String(const CString& s)
{
	return String::NewFromOneByte(Isolate::GetCurrent(), (const uint8_t*)(LPCSTR)s);
}

void ThrowException(const CString& sError)
{
	Isolate::GetCurrent()->ThrowException(::AsV8String(sError));
}

