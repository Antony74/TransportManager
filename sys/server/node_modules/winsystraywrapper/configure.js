//
// usage: node ./configure.js
//
// Equivalent to the following batch commands, except the version of node is not hard-coded.
//
//     node-gyp configure --msvs_version=2008 --arch=ia32
//     rename build node_v0.12.7_build
//
// This generates a .sln file, which we can then open in Visual Studio and build.
//

///<reference path='../../../interface/node.d.ts' />

var path = require('path');
var fs = require('fs');

var spawn = require('child_process').spawn;
var gyp = spawn('node-gyp.cmd', ['configure', '--msvs_version=2008', '--arch-ia32']);
logOutput(gyp);

gyp.on('close', function (exitCode)
{
    if (exitCode == 0)
    {
        var unwantedPath = path.resolve('build');
        var desiredPath = path.resolve('node_' + process.version + '_build');

        deleteFolderRecursive(desiredPath);
        fs.rename(unwantedPath, desiredPath);
    }
});

//
// logOutput - utility function
//
function logOutput(childProcess)
{
    childProcess.stdout.on('data', function(data)
    {
      console.log(data.toString());
    });

    childProcess.stderr.on('data', function(data)
    {
      console.log(data.toString());
    });

    childProcess.on('error', function(e)
    {
        console.log('An error occured while attempting to spawn a child-process');
        console.log(e.toString());
    });
}

//
// deleteFolderRecursive - utility function
// See http://stackoverflow.com/a/12761924/4004986
//
function deleteFolderRecursive(path) {
    var files = [];
    if( fs.existsSync(path) ) {
        files = fs.readdirSync(path);
        files.forEach(function(file,index){
            var curPath = path + "/" + file;
            if(fs.lstatSync(curPath).isDirectory()) { // recurse
                deleteFolderRecursive(curPath);
            } else { // delete file
                fs.unlinkSync(curPath);
            }
        });
        fs.rmdirSync(path);
    }
};

